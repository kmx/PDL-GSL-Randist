# Format is as follows:
#
# gsl_name:
# name:        # Human-readable name
# type:        # Continuous or Discrete
# sample:      # Boolean saying whether or not there is a gsl_ran_<name> sampler
# pdf:         # Boolean: is there a gsl_ran_<name>_pdf?
# cdf:         # Boolean: is there a gsl_ran_<name>_P and gsl_ran_<name>_Q?
# cdfinv:      # Boolean: is there a gsl_ran_<name>_Pinv and gsl_ran_<name>_Qinv?
# args:
#   - name: argument1      
#     type: argument1_type
#     testval: 123
#   - name: argument2
#     type: argument2_type
#     testval: 456
# rname:       # base name for R-like interface
# addlocation: # add location parameter to R-like interface? 1 for yes, /\w+/ for name 

# Note: The following distributions are bound manually b/c they are multivariate:
#   Bivariate Gaussian
#   Spherical Vector Distributions
#   Shuffling and Sampling
#   Dirichlet Distribution
#   Multinomial Distribution
#   General Discrete Distributions (not implemented yet)
#
# There are no bindings for ugaussian (ugaussian_tail) b/c that's just gaussian
# (gaussian_tail) with sigma=1.0
#
# Testing:
# The goal of testing for this binding to make sure the perl calls are
# producing the same values as the C calls, and NOT to check their statistical
# properties.  To this end, each argument for each distribution has a 'testval'
# which meant to provide an arbitrary testable parameter value within the
# appropriate range.
#
# Each discrete (continuous) distribution pdf, cdf, and cdfinv is then tested
# with x = 1 .. 10 (x = -5 to 5 by .4).  The samplers are also tested with the
# same test parameters.

gaussian:
  name: Gaussian Distribution
  rname: norm
  type: Continuous
  sample: 1
  addlocation: mean
  alternate_sample: 
    - ziggurat
    - ratio_method
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: sigma
      type: double
      testval: 3.4
      # double gsl_ran_gaussian (const gsl_rng * r, double sigma)
      # double gsl_ran_gaussian_ziggurat (const gsl_rng * r, double sigma) * bound manually
      # double gsl_ran_gaussian_ratio_method (const gsl_rng * r, double sigma) * ditto
      # double gsl_ran_gaussian_pdf (double x, double sigma)
      # double gsl_cdf_gaussian_P (double x, double sigma)
      # double gsl_cdf_gaussian_Q (double x, double sigma)
      # double gsl_cdf_gaussian_Pinv (double P, double sigma)
      # double gsl_cdf_gaussian_Qinv (double Q, double sigma)

gaussian_tail: 
  name: Gaussian Tail Distribution
  rname: norm_tail
  type: Continuous
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 0
  cdfinv: 0
  args:
    - name: a
      type: double
      testval: 2.4
    - name: sigma
      type: double
      testval: 8.2
    # double gsl_ran_gaussian_tail (const gsl_rng * r, double a, double sigma)
    # double gsl_ran_gaussian_tail_pdf (double x, double a, double sigma)

exponential: 
  name: Exponential Distribution
  rname: exp
  type: Continuous
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: mu
      type: double
      testval: 3.3
    # double gsl_ran_exponential (const gsl_rng * r, double mu)
    # double gsl_ran_exponential_pdf (double x, double mu)
    # double gsl_cdf_exponential_P (double x, double mu)
    # double gsl_cdf_exponential_Q (double x, double mu)
    # double gsl_cdf_exponential_Pinv (double P, double mu)
    # double gsl_cdf_exponential_Qinv (double Q, double mu)

laplace: 
  name: The Laplace Distribution
  rname: laplace
  type: Continuous
  sample: 1
  addlocation: 1
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: a
      type: double
      testval: 2.85
    # double gsl_ran_laplace (const gsl_rng * r, double a)
    # double gsl_ran_laplace_pdf (double x, double a)
    # double gsl_cdf_laplace_P (double x, double a)
    # double gsl_cdf_laplace_Q (double x, double a)
    # double gsl_cdf_laplace_Pinv (double P, double a)
    # double gsl_cdf_laplace_Qinv (double Q, double a)

exppow: 
  name: The Exponential Power Distribution
  rname: exppow
  type: Continuous
  sample: 1
  addlocation: 1
  pdf: 1
  cdf: 1
  cdfinv: 0
  args:
    - name: a
      type: double
      testval: 2.8
    - name: b
      type: double
      testval: 1.2
    # double gsl_ran_exppow (const gsl_rng * r, double a, double b)
    # double gsl_ran_exppow_pdf (double x, double a, double b)
    # double gsl_cdf_exppow_P (double x, double a, double b)
    # double gsl_cdf_exppow_Q (double x, double a, double b)

cauchy: 
  name: Cauchy Distribution
  rname: cauchy
  type: Continuous
  sample: 1
  addlocation: 1
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: scale
      type: double
      testval: 3.5
    # double gsl_ran_cauchy (const gsl_rng * r, double a)
    # double gsl_ran_cauchy_pdf (double x, double a)
    # double gsl_cdf_cauchy_P (double x, double a)
    # double gsl_cdf_cauchy_Q (double x, double a)
    # double gsl_cdf_cauchy_Pinv (double P, double a)
    # double gsl_cdf_cauchy_Qinv (double Q, double a)

rayleigh: 
  name: Rayleigh Distribution
  rname: rayleigh
  type: Continuous
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: sigma
      type: double
      testval: 2.3
    # double gsl_ran_rayleigh (const gsl_rng * r, double sigma)
    # double gsl_ran_rayleigh_pdf (double x, double sigma)
    # double gsl_cdf_rayleigh_P (double x, double sigma)
    # double gsl_cdf_rayleigh_Q (double x, double sigma)
    # double gsl_cdf_rayleigh_Pinv (double P, double sigma)
    # double gsl_cdf_rayleigh_Qinv (double Q, double sigma)

rayleigh_tail: 
  name: Rayleigh Tail Distribution
  rname: rayleigh_tail
  type: Continuous
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 0
  cdfinv: 0
  args:
    - name: a
      type: double
      testval: 3.8
    - name: sigma
      type: double
      testval: 2.3
    # double gsl_ran_rayleigh_tail (const gsl_rng * r, double a, double sigma)
    # double gsl_ran_rayleigh_tail_pdf (double x, double a, double sigma)

landau: 
  name: Landau Distribution
  rname: landau
  type: Continuous
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 0
  cdfinv: 0
  args:
    # double gsl_ran_landau (const gsl_rng * r)
    # double gsl_ran_landau_pdf (double x)

levy: 
  name: Levy alpha-Stable Distributions
  rname: levy
  type: Continuous
  sample: 1
  addlocation: 1
  pdf: 0
  cdf: 0
  cdfinv: 0
  args:
    - name: scale
      type: double
      testval: 0.5
    - name: stability
      type: double
      testval: 1.1
    # double gsl_ran_levy (const gsl_rng * r, double c, double alpha)

levy_skew: 
  name: Levy skew alpha-Stable Distribution
  rname: levyskew
  type: Continuous
  sample: 1
  addlocation: 1
  pdf: 0
  cdf: 0
  cdfinv: 0
  args:
    - name: scale
      type: double
      testval: 0.5
    - name: stability
      type: double
      testval: 1.1
    - name: skewness
      type: double
      testval: 0.4
    # double gsl_ran_levy_skew (const gsl_rng * r, double c, double alpha, double beta)

gamma:  
  name: Gamma Distribution
  rname: gamma
  type: Continuous
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: a
      type: double
      testval: 3.1
    - name: b
      type: double
      testval: 2.4
    # double gsl_ran_gamma (const gsl_rng * r, double a, double b)
    # double gsl_ran_gamma_pdf (double x, double a, double b)
    # double gsl_cdf_gamma_P (double x, double a, double b)
    # double gsl_cdf_gamma_Q (double x, double a, double b)
    # double gsl_cdf_gamma_Pinv (double P, double a, double b)
    # double gsl_cdf_gamma_Qinv (double Q, double a, double b)

flat: 
  name: Flat (Uniform) Distribution
  rname: unif
  type: Continuous
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: a
      type: double
      testval: -3.0
    - name: b
      type: double
      testval: 2.0
    # double gsl_ran_flat (const gsl_rng * r, double a, double b)
    # double gsl_ran_flat_pdf (double x, double a, double b)
    # double gsl_cdf_flat_P (double x, double a, double b)
    # double gsl_cdf_flat_Q (double x, double a, double b)
    # double gsl_cdf_flat_Pinv (double P, double a, double b)
    # double gsl_cdf_flat_Qinv (double Q, double a, double b)

lognormal: 
  name: Lognormal Distribution
  rname: lnorm
  type: Continuous
  sample: 1
  addlocation: 1
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: zeta
      type: double
      testval: 3.2
    - name: sigma
      type: double
      testval: 2.3
    # double gsl_ran_lognormal (const gsl_rng * r, double zeta, double sigma)
    # double gsl_ran_lognormal_pdf (double x, double zeta, double sigma)
    # double gsl_cdf_lognormal_P (double x, double zeta, double sigma)
    # double gsl_cdf_lognormal_Q (double x, double zeta, double sigma)
    # double gsl_cdf_lognormal_Pinv (double P, double zeta, double sigma)
    # double gsl_cdf_lognormal_Qinv (double Q, double zeta, double sigma)

chisq: 
  name: Chi-squared Distribution
  rname: chisq
  type: Continuous
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: nu
      type: double
      testval: 5.5
    # double gsl_ran_chisq (const gsl_rng * r, double nu)
    # double gsl_ran_chisq_pdf (double x, double nu)
    # double gsl_cdf_chisq_P (double x, double nu)
    # double gsl_cdf_chisq_Q (double x, double nu)
    # double gsl_cdf_chisq_Pinv (double P, double nu)
    # double gsl_cdf_chisq_Qinv (double Q, double nu)

fdist: 
  name: F-distribution
  rname: f
  type: Continuous
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: nu1
      type: double
      testval: 7.0
    - name: nu2
      type: double
      testval: 8.0
    # double gsl_ran_fdist (const gsl_rng * r, double nu1, double nu2)
    # double gsl_ran_fdist_pdf (double x, double nu1, double nu2)
    # double gsl_cdf_fdist_P (double x, double nu1, double nu2)
    # double gsl_cdf_fdist_Q (double x, double nu1, double nu2)
    # double gsl_cdf_fdist_Pinv (double P, double nu1, double nu2)
    # double gsl_cdf_fdist_Qinv (double Q, double nu1, double nu2)

tdist: 
  name: t-distribution
  rname: t
  type: Continuous
  sample: 1
  addlocation: 1
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: nu
      type: double
      testval: 7.76
    # double gsl_ran_tdist (const gsl_rng * r, double nu)
    # double gsl_ran_tdist_pdf (double x, double nu)
    # double gsl_cdf_tdist_P (double x, double nu)
    # double gsl_cdf_tdist_Q (double x, double nu)
    # double gsl_cdf_tdist_Pinv (double P, double nu)
    # double gsl_cdf_tdist_Qinv (double Q, double nu)

beta:  
  name: Beta Distribution
  rname: beta
  type: Continuous
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: a
      type: double
      testval: 3.5
    - name: b
      type: double
      testval: 2.0
    # double gsl_ran_beta (const gsl_rng * r, double a, double b)
    # double gsl_ran_beta_pdf (double x, double a, double b)
    # double gsl_cdf_beta_P (double x, double a, double b)
    # double gsl_cdf_beta_Q (double x, double a, double b)
    # double gsl_cdf_beta_Pinv (double P, double a, double b)
    # double gsl_cdf_beta_Qinv (double Q, double a, double b)

logistic: 
  name: Logistic Distribution
  rname: logistic
  type: Continuous
  sample: 1
  addlocation: 1
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: a
      type: double
      testval: 2.6
    # double gsl_ran_logistic (const gsl_rng * r, double a)
    # double gsl_ran_logistic_pdf (double x, double a)
    # double gsl_cdf_logistic_P (double x, double a)
    # double gsl_cdf_logistic_Q (double x, double a)
    # double gsl_cdf_logistic_Pinv (double P, double a)
    # double gsl_cdf_logistic_Qinv (double Q, double a)

pareto: 
  name: Pareto Distribution
  rname: pareto
  type: Continuous
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: a
      type: double
      testval: 1.5
    - name: b
      type: double
      testval: 1.1
    # double gsl_ran_pareto (const gsl_rng * r, double a, double b)
    # double gsl_ran_pareto_pdf (double x, double a, double b)
    # double gsl_cdf_pareto_P (double x, double a, double b)
    # double gsl_cdf_pareto_Q (double x, double a, double b)
    # double gsl_cdf_pareto_Pinv (double P, double a, double b)
    # double gsl_cdf_pareto_Qinv (double Q, double a, double b)

weibull: 
  name: Weibull Distribution
  rname: weibull
  type: Continuous
  sample: 1
  addlocation: 1
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: a
      type: double
      testval: 4.32
    - name: b
      type: double
      testval: 1.80
    # double gsl_ran_weibull (const gsl_rng * r, double a, double b)
    # double gsl_ran_weibull_pdf (double x, double a, double b)
    # double gsl_cdf_weibull_P (double x, double a, double b)
    # double gsl_cdf_weibull_Q (double x, double a, double b)
    # double gsl_cdf_weibull_Pinv (double P, double a, double b)
    # double gsl_cdf_weibull_Qinv (double Q, double a, double b)

gumbel1: 
  name: Type-1 Gumbel Distribution
  rname: gumbel1
  type: Continuous
  sample: 1
  addlocation: 1
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: a
      type: double
      testval: 2.9
    - name: b
      type: double
      testval: 4.6
    # double gsl_ran_gumbel1 (const gsl_rng * r, double a, double b)
    # double gsl_ran_gumbel1_pdf (double x, double a, double b)
    # double gsl_cdf_gumbel1_P (double x, double a, double b)
    # double gsl_cdf_gumbel1_Q (double x, double a, double b)
    # double gsl_cdf_gumbel1_Pinv (double P, double a, double b)
    # double gsl_cdf_gumbel1_Qinv (double Q, double a, double b)

gumbel2: 
  name: The Type-2 Gumbel Distribution
  rname: gumbel2
  type: Continuous
  sample: 1
  addlocation: 1
  pdf: 1
  cdf: 1
  cdfinv: 1
  args:
    - name: a
      type: double
      testval: 2.9
    - name: b
      type: double
      testval: 4.6
    # double gsl_ran_gumbel2 (const gsl_rng * r, double a, double b)
    # double gsl_ran_gumbel2_pdf (double x, double a, double b)
    # double gsl_cdf_gumbel2_P (double x, double a, double b)
    # double gsl_cdf_gumbel2_Q (double x, double a, double b)
    # double gsl_cdf_gumbel2_Pinv (double P, double a, double b)
    # double gsl_cdf_gumbel2_Qinv (double Q, double a, double b)

poisson: 
  name: Poisson Distribution
  rname: pois
  type: Discrete
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 1
  cdfinv: 0
  args:
    - name: mu
      type: double
      testval: 15.0
    # unsigned int gsl_ran_poisson (const gsl_rng * r, double mu)
    # double gsl_ran_poisson_pdf (unsigned int k, double mu)
    # double gsl_cdf_poisson_P (unsigned int k, double mu)
    # double gsl_cdf_poisson_Q (unsigned int k, double mu)
 
bernoulli:  
  name: Bernoulli Distribution
  rname: bern
  type: Discrete
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 0
  cdfinv: 0
  args:
    - name: p
      type: double
      testval: .7
    # unsigned int gsl_ran_bernoulli (const gsl_rng * r, double p)
    # double gsl_ran_bernoulli_pdf (unsigned int k, double p)
 
negative_binomial: 
  name: Negative Binomial Distribution
  rname: rbinom
  type: Discrete
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 1
  cdfinv: 0
  args:
    - name: p
      type: double
      testval: .6
    - name: n
      type: double
      testval: 30
    # unsigned int gsl_ran_negative_binomial (const gsl_rng * r, double p, double n)
    # double gsl_ran_negative_binomial_pdf (unsigned int k, double p, double  n)
    # double gsl_cdf_negative_binomial_P (unsigned int k, double p, double n)
    # double gsl_cdf_negative_binomial_Q (unsigned int k, double p, double n)

geometric: 
  name: Geometric Distribution
  rname: geom
  type: Discrete
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 1
  cdfinv: 0
  args:
    - name: p
      type: double
      testval: .7
    # unsigned int gsl_ran_geometric (const gsl_rng * r, double p)
    # double gsl_ran_geometric_pdf (unsigned int k, double p)
    # double gsl_cdf_geometric_P (unsigned int k, double p)
    # double gsl_cdf_geometric_Q (unsigned int k, double p)
 
logarithmic: 
  name: Logarithmic Distribution
  rname: logarithmic
  type: Discrete
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 0
  cdfinv: 0
  args:
    - name: p
      type: double
      testval: .6
    # unsigned int gsl_ran_logarithmic (const gsl_rng * r, double p)
    # double gsl_ran_logarithmic_pdf (unsigned int k, double p)
    
binomial: 
  name: Binomial Distribution
  rname: binom
  type: Discrete
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 1
  cdfinv: 0
  test_min: 0
  test_max: 100
  args:
    - name: p
      type: double
      testval: .7
    - name: n
      type: unsigned int
      testval: 14
    # unsigned int gsl_ran_binomial (const gsl_rng * r, double p, unsigned int n)
    # double gsl_ran_binomial_pdf (unsigned int k, double p, unsigned int n)
    # double gsl_cdf_binomial_P (unsigned int k, double p, unsigned int n)
    # double gsl_cdf_binomial_Q (unsigned int k, double p, unsigned int n)

pascal: 
  name: Pascal Distribution
  rname: pascal
  type: Discrete
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 1
  cdfinv: 0
  args:
    - name: p
      type: double
      testval: .5
    - name: n
      type: unsigned int
      testval: 5
    # unsigned int gsl_ran_pascal (const gsl_rng * r, double p, unsigned int n)
    # double gsl_ran_pascal_pdf (unsigned int k, double p, unsigned int n)
    # double gsl_cdf_pascal_P (unsigned int k, double p, unsigned int n)
    # double gsl_cdf_pascal_Q (unsigned int k, double p, unsigned int n)
    
hypergeometric: 
  name: Hypergeometric Distribution
  rname: hyper
  type: Discrete
  sample: 1
  addlocation: 0
  pdf: 1
  cdf: 1
  cdfinv: 0
  args:
    - name: n1
      type: unsigned int
      testval: 6
    - name: n2
      type: unsigned int
      testval: 12
    - name: t
      type: unsigned int
      testval: 8
    # unsigned int gsl_ran_hypergeometric (const gsl_rng * r, unsigned int n1, unsigned int n2, unsigned int t)
    # double gsl_ran_hypergeometric_pdf (unsigned int k, unsigned int n1, unsigned int n2, unsigned int t)
    # double gsl_cdf_hypergeometric_P (unsigned int k, unsigned int n1, unsigned int n2, unsigned int t)
    # double gsl_cdf_hypergeometric_Q (unsigned int k, unsigned int n1, unsigned int n2, unsigned int t)

#### manual

# Spherical Vector Distributions
#     void gsl_ran_dir_2d (const gsl_rng * r, double * x, double * y)
#     void gsl_ran_dir_2d_trig_method (const gsl_rng * r, double * x, double * y)
#     void gsl_ran_dir_3d (const gsl_rng * r, double * x, double * y, double * z)
#     void gsl_ran_dir_nd (const gsl_rng * r, size_t n, double * x)

# Shuffling and Sampling
#     void gsl_ran_shuffle (const gsl_rng * r, void * base, size_t n, size_t size)
#     int gsl_ran_choose (const gsl_rng * r, void * dest, size_t k, void * src, size_t n, size_t size)
#     void gsl_ran_sample (const gsl_rng * r, void * dest, size_t k, void * src, size_t n, size_t size)

# dirichlet:
#     void gsl_ran_dirichlet (const gsl_rng * r, size_t K, const double alpha[], double theta[])
#     double gsl_ran_dirichlet_pdf (size_t K, const double alpha[], const double theta[]) 
#     double gsl_ran_dirichlet_lnpdf (size_t K, const double alpha[], const double theta[]) 

# discrete:
#     gsl_ran_discrete_t * gsl_ran_discrete_preproc (size_t K, const double * P)
#     size_t gsl_ran_discrete (const gsl_rng * r, const gsl_ran_discrete_t * g)
#     double gsl_ran_discrete_pdf (size_t k, const gsl_ran_discrete_t * g)
#     void gsl_ran_discrete_free (gsl_ran_discrete_t * g)

# multinomial:
#   name: Multinomial Distribution
#     void gsl_ran_multinomial (const gsl_rng * r, size_t K, unsigned int N, const double p[], unsigned int n[])
#     double gsl_ran_multinomial_pdf (size_t K, const double p[], const unsigned int n[]) 
#     double gsl_ran_multinomial_lnpdf (size_t K, const double p[], const unsigned int n[]) 

# bivariate_gaussian:
#   name: Bivariate Gaussian Distribution
#     void gsl_ran_bivariate_gaussian (const gsl_rng * r, double sigma_x, double sigma_y, double rho, double * x, double * y)
#     double gsl_ran_bivariate_gaussian_pdf (double x, double y, double sigma_x, double sigma_y, double rho)

# gamma has an extra sampler which is bound manually:
# double gsl_ran_gamma_knuth (const gsl_rng * r, double a, double b)
